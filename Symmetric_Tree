# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        if not root:
            return True
        
        def is_mirror(left, right):
            # Base case: both nodes are None
            if not left and not right:
                return True
            # If only one node is None or values are different, not symmetric
            if not left or not right or left.val != right.val:
                return False
            # Recursively check symmetry
            return is_mirror(left.left, right.right) and is_mirror(left.right, right.left)
        
        return is_mirror(root.left, root.right)
        # Test cases
        solution = Solution()
