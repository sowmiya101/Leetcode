# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if not preorder or not inorder:
            return None
        
        # Create a dictionary to store the index of each value in the inorder list
        index_map = {val: idx for idx, val in enumerate(inorder)}
        
        # Define a recursive helper function to build the tree
        def helper(preorder_start, preorder_end, inorder_start, inorder_end):
            if preorder_start > preorder_end:
                return None
            
            # The first element in the preorder list is the root of the current subtree
            root_val = preorder[preorder_start]
            root = TreeNode(root_val)

            inorder_index = index_map[root_val]
            left_subtree_size = inorder_index - inorder_start
            
            # Recursively build the left and right subtrees
            root.left = helper(preorder_start + 1, preorder_start + left_subtree_size, inorder_start, inorder_index - 1)
            root.right = helper(preorder_start + left_subtree_size + 1, preorder_end, inorder_index + 1, inorder_end)
            
            return root
        
        # Call the helper function to build the tree
        return helper(0, len(preorder) - 1, 0, len(inorder) - 1)
